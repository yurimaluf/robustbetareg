% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/robustbetareg.R
\name{waldtypetest}
\alias{waldtypetest}
\title{Robust Wald-type Tests}
\usage{
waldtypetest(object, FUN, ...)
}
\arguments{
\item{object}{fitted model object of class \code{robustbetareg} (see \code{\link[robustbetareg:robustbetareg]{robustbetareg}}).}

\item{FUN}{function representing the null hypothesis to be tested.}

\item{...}{further arguments to be passed to the \code{FUN} function.}
}
\value{
\code{waldtypetest} returns an output for the Wald-type test containing
the value for the test statistics, degrees-of-freedom and p-value.
}
\description{
\code{waldtypetest} provides Wald-type tests for both simple and composite
hypothesis for independent but non-homogeneous observations,
based on the robust estimators (LSMLE, LMDPDE, SMLE, and MDPDE).
}
\details{
The function provides a procedure to test a general hypothesis
    \eqn{m(\theta) = \eta_0}, for a fixed \eqn{\eta_0 \in R^d}, against
    a two side alternative, through a robust Wald-type test; see Maluf
    et al. (2022) for further details. The argument \code{FUN} specifies the
    function \eqn{m(\theta) - \eta_0} which defines the null hypothesis to be
    considered in the test. For instance, consider a model with
    \eqn{\theta = (\beta_1, \beta_2, \beta_3, \gamma_1)^\top} and suppose that we
    want to test the null hypothesis \eqn{\beta_2 + \beta_3 = 4}
    against a two side alternative. The \code{FUN} argument can be
    \code{FUN = function(theta) \{theta[2] + theta[3] - 4\} }. It is also possible
    define the function as \code{FUN = function(theta, B) \{theta[2] + theta[3] - B\}},
    and pass the \code{B} argument to the \code{waldtypetest} function.
    If no function is specified, that is, \code{FUN=NULL}, the \code{waldtypetest}
    returns a test in which the null hypothesis is that all the coefficients are
    jointly equal to zero.
}
\examples{
\dontrun{
set.seed(2022)
N <- 40 #Sample Size
beta.coef <- c(-1,-2) #Arbitrary Beta Coefficients
gamma.coef <- c(5) #Arbitrary Gamma Coefficient
X <- cbind(rep(1,N), x <- runif(N))
mu <- exp(X\%*\%beta.coef)/(1+exp(X\%*\%beta.coef)) #Inverse Logit Link Function
phi <- exp(gamma.coef) #Inverse Log Link Function
y <- rbeta(N, mu*phi, (1-mu)*phi)
y[26] <- rbeta(1,((1 + mu[26])/2)*phi,(1-((1 + mu[26])/2))*phi) #Contaminated data point
SimData <- as.data.frame(cbind(y,x))
colnames(SimData) <- c("y","x")
fit.mle <- robustbetareg(y ~ x | 1, data = SimData, alpha = 0) #Non-Robust Estimator
fit.lsmle <- robustbetareg(y ~ x | 1, data = SimData) #Robust Estimator
h0 <- function(theta,B){theta[1:2] - B} #Hiphothesis to be tested
waldtypetest(fit.mle, h0, B = beta.coef) #Testing beta.1=-1 and beta.2=-2
waldtypetest(fit.simdata, h0, B = beta.coef) #Testing beta.1=-1 and beta.2=-2}

}
\references{
Maluf, Y. S., Ferrari, S. L. P., and Queiroz, F. F. (2022). Robust
    beta regression through the logit transformation. \emph{arXiv}:2209.11315.\cr \cr
    Basu, A., Ghosh, A., Martin, N., and Pardo, L. (2018). Robust Wald-type
    tests for  non-homogeneous observations based on the minimum density
    power divergence estimator. \emph{Metrika}, 81:493â€“522. \cr \cr
    Ribeiro, K. A. T. and Ferrari, S. L. P. (2022). Robust estimation in beta
    regression via maximum Lq-likelihood. \emph{Statistical Papers}.
}
\seealso{
\code{\link[robustbetareg:robustbetareg]{robustbetareg}}
}
\author{
Yuri S. Maluf (\email{yurimaluf@gmail.com}),
Francisco F. Queiroz (\email{ffelipeq@outlook.com}) and Silvia L. P. Ferrari.
}
